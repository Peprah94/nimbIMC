ggplot(., mapping = aes(x = as.numeric(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
theme_bw()
meanPlot
meanPlot <- lapply(seq_along(allData), function(i){
x <- allData[[i]]
output <-  x[grepl(nodes, rownames(x)),"Mean"]%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = rownames(x)[grepl(nodes, rownames(x))],
model = rep(paste0("model", i), length(rownames(x)[grepl(nodes, rownames(x))])))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1] <- "mean"
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
theme_bw()
meanPlot
allData[[1]]
i = 1
x <- allData[[i]]
x[grepl(nodes, rownames(x)),c(1,3) ]
meanPlot <- lapply(seq_along(allData), function(i){
x <- allData[[i]]
output <-  x[grepl(nodes, rownames(x)),"Mean"]%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = rownames(x)[grepl(nodes, rownames(x))],
model = rep(paste0("model", i), length(rownames(x)[grepl(nodes, rownames(x))])))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1] <- "mean"
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
theme_bw()+
xlab("Parameters")
sePlot <- lapply(seq_along(allData), function(i){
x <- allData[[i]]
output <-  x[grepl(nodes, rownames(x)),c(1,3) ]%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = rownames(x)[grepl(nodes, rownames(x))],
model = rep(paste0("model", i), length(rownames(x)[grepl(nodes, rownames(x))])))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1] <- "mean"
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
geom_ribbon(aes(ymin = mean - se, ymax = mean + se, fill = model), alpha = 0.1) +
theme_bw()+
xlab("Parameters")
sePlot
lapply(seq_along(allData), function(i){
x <- allData[[i]]
output <-  x[grepl(nodes, rownames(x)),c(1,3) ]%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = rownames(x)[grepl(nodes, rownames(x))],
model = rep(paste0("model", i), length(rownames(x)[grepl(nodes, rownames(x))])))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1] <- "mean"
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()
lapply(seq_along(allData), function(i){
x <- allData[[i]]
output <-  x[grepl(nodes, rownames(x)),c(1,3) ]%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = rownames(x)[grepl(nodes, rownames(x))],
model = rep(paste0("model", i), length(rownames(x)[grepl(nodes, rownames(x))])))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1] <- "mean"
return(output)
})%>%
do.call("rbind", .)
sePlot <- lapply(seq_along(allData), function(i){
x <- allData[[i]]
output <-  x[grepl(nodes, rownames(x)),c(1,3) ]%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = rownames(x)[grepl(nodes, rownames(x))],
model = rep(paste0("model", i), length(rownames(x)[grepl(nodes, rownames(x))])))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1:2] <- c("mean", "se")
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
geom_ribbon(aes(ymin = mean - se, ymax = mean + se, fill = model), alpha = 0.1) +
theme_bw()+
xlab("Parameters")
sePlot
confintPlot <- lapply(seq_along(allData), function(i){
x <- allData[[i]]
output <-  x[grepl(nodes, rownames(x)),c(1,4,5) ]%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = rownames(x)[grepl(nodes, rownames(x))],
model = rep(paste0("model", i), length(rownames(x)[grepl(nodes, rownames(x))])))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1:3] <- c("mean", "lower", "upper")
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
geom_ribbon(aes(ymin = lower, ymax = upper, fill = model), alpha = 0.1) +
theme_bw()+
xlab("Parameters")
confintPlot
ret <- compareModelsMeanPlots(models = models,
modelNames = c("reduced model", "updated Model"),
fullModel = stateSpaceModel
n.chains = 2,
ret <- compareModelsMeanPlots(models = models,
modelNames = c("reduced model", "updated Model"),
fullModel = stateSpaceModel,
n.chains = 2,
nodes = target)
devtools::load_all(".")
ret <- compareModelsMeanPlots(models = models,
modelNames = c("reduced model", "updated Model"),
fullModel = stateSpaceModel,
n.chains = 2,
nodes = target)
ret <- compareModelsMeanPlots(models = models,
modelNames = c("reduced model", "updated Model"),
fullModel = stateSpaceModel,
nodes = target)
ret$meanPlot
target
nodes = target
mean <- metrics[["mean"]]
se <- metrics[["se"]]
confint <- metrics[["confint"]]
allData <-  lapply(models, function(x){
x$summary$all.chains
})
metrics = list(mean= TRUE,
se = TRUE,
confint = TRUE)
mean <- metrics[["mean"]]
se <- metrics[["se"]]
confint <- metrics[["confint"]]
allData <-  lapply(models, function(x){
x$summary$all.chains
})
meanPlot <- lapply(seq_along(allData), function(i){
x <- allData[[i]]
output <-  x[grepl(nodes, rownames(x)),"Mean"]%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = rownames(x)[grepl(nodes, rownames(x))],
model = rep(paste0("model", i), length(rownames(x)[grepl(nodes, rownames(x))])))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1] <- "mean"
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
theme_bw()+
xlab("Parameters")
fullModel$expandNodeNames(nodes)
i = 1
x <- allData[[i]]
x[grepl(nodes, rownames(x)),"Mean"]%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()
x[sapply(nodes, function(r){grepl(nodes, rownames(x))}),"Mean"]
x[sapply(nodes, function(r){grepl(r, rownames(x))}),"Mean"]
sapply(nodes, function(r){grepl(r, rownames(x))})
lapply(as.list(nodes), function(r){x[grepl(r, rownames(x)),"Mean"]}
)
sapply(nodes, function(r){x[grepl(r, rownames(x)),"Mean"]})
sapply(nodes, function(r){x[grepl(r, rownames(x)),"Mean"]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()
meanPlot <- lapply(seq_along(allData), function(i){
x <- allData[[i]]
output <-  sapply(nodes, function(r){x[grepl(r, rownames(x)),"Mean"]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = rownames(x)[grepl(nodes, rownames(x))],
model = rep(paste0("model", i), length(rownames(x)[grepl(nodes, rownames(x))])))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1] <- "mean"
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
theme_bw()+
xlab("Parameters")
lengthNodes <- length(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
lengthNodes
meanPlot <- lapply(seq_along(allData), function(i){
x <- allData[[i]]
lengthNodes <- length(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
output <-  sapply(nodes, function(r){x[grepl(r, rownames(x)),"Mean"]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = rownames(x)[grepl(nodes, rownames(x))],
model = rep(paste0("model", i), 4))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1] <- "mean"
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
theme_bw()+
xlab("Parameters")
meanPlot
nodeNames <- sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]})
nodeNames
nodeNames <- c(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
nodeNames
meanPlot <- lapply(seq_along(allData), function(i){
x <- allData[[i]]
lengthNodes <- length(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
nodeNames <- c(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
output <-  sapply(nodes, function(r){x[grepl(r, rownames(x)),"Mean"]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = nodeNames,
model = rep(paste0("model", i), 4))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1] <- "mean"
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
theme_bw()+
xlab("Parameters")
meanPlot
meanPlot <- lapply(seq_along(allData), function(i){
x <- allData[[i]]
lengthNodes <- length(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
nodeNames <- c(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
output <-  sapply(nodes, function(r){x[grepl(r, rownames(x)),"Mean"]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = nodeNames,
model = rep(paste0("model", i), lengthNodes))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1] <- "mean"
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
theme_bw()+
xlab("Parameters")
meanPlot
devtools::load_all(".")
ret <- compareModelsMeanPlots(models = models,
modelNames = c("reduced model", "updated Model"),
fullModel = stateSpaceModel,
nodes = target)
nodeNames <- c(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
nodeNames
sapply(nodes, function(r){x[grepl(r, rownames(x)),c(1,4,5)]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = nodeNames,
model = rep(paste0("model", i), lengthNodes))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
sapply(nodes, function(r){x[grepl(r, rownames(x)),c(1,4,5)]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = nodeNames,
model = rep(paste0("model", i), lengthNodes))
nodeNames
nodeNames <- c(tapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
nodeNames <- c(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
nodeNames
nodeNames <- c(sapply(nodes, function(r){c(rownames(x)[grepl(r, rownames(x))])}))
nodeNames
unlist(nodeNames)
as.vector(nodeNames)
devtools::load_all(".")
ret <- compareModelsMeanPlots(models = models,
modelNames = c("reduced model", "updated Model"),
fullModel = stateSpaceModel,
nodes = target)
mean <- metrics[["mean"]]
se <- metrics[["se"]]
confint <- metrics[["confint"]]
allData <-  lapply(models, function(x){
x$summary$all.chains
})
meanPlot <- lapply(seq_along(allData), function(i){
x <- allData[[i]]
lengthNodes <- length(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
nodeNames <- as.vector(sapply(nodes, function(r){c(rownames(x)[grepl(r, rownames(x))])}))
output <-  sapply(nodes, function(r){x[grepl(r, rownames(x)),"Mean"]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = nodeNames,
model = rep(paste0("model", i), lengthNodes))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1] <- "mean"
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
theme_bw()+
xlab("Parameters")
meanPlot
sePlot <- lapply(seq_along(allData), function(i){
lengthNodes <- length(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
nodeNames <- as.vector(sapply(nodes, function(r){c(rownames(x)[grepl(r, rownames(x))])}))
output <-  sapply(nodes, function(r){x[grepl(r, rownames(x)),c(1,3)]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = nodeNames,
model = rep(paste0("model", i), lengthNodes))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
colnames(output)[1:2] <- c("mean", "se")
return(output)
})%>%
do.call("rbind", .)%>%
ggplot(., mapping = aes(x = as.factor(Parameters), y = mean, col = model, group = model))+
geom_point()+
geom_line()+
geom_ribbon(aes(ymin = mean - se, ymax = mean + se, fill = model), alpha = 0.1) +
theme_bw()+
xlab("Parameters")
lengthNodes <- length(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
nodeNames <- as.vector(sapply(nodes, function(r){c(rownames(x)[grepl(r, rownames(x))])}))
output <-  sapply(nodes, function(r){x[grepl(r, rownames(x)),c(1,3)]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = nodeNames,
model = rep(paste0("model", i), lengthNodes))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
sapply(nodes, function(r){x[grepl(r, rownames(x)),c(1,3)]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()
sapply(nodes, function(r){x[grepl(r, rownames(x)),c(1,3)]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
t()
sapply(nodes, function(r){x[grepl(r, rownames(x)),c(1,3)]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
t()%>%
data.frame()
output <-  sapply(nodes, function(r){x[grepl(r, rownames(x)),c(1,3)]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
t()%>%
data.frame()%>%
dplyr::mutate(Parameters = nodeNames,
model = rep(paste0("model", i), lengthNodes))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
i
x <- allData[[i]]
lengthNodes <- length(sapply(nodes, function(r){rownames(x)[grepl(r, rownames(x))]}))
nodeNames <- as.vector(sapply(nodes, function(r){c(rownames(x)[grepl(r, rownames(x))])}))
output <-  sapply(nodes, function(r){x[grepl(r, rownames(x)),"Mean"]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
data.frame()%>%
dplyr::mutate(Parameters = nodeNames,
model = rep(paste0("model", i), lengthNodes))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
output
output <-  sapply(nodes, function(r){x[grepl(r, rownames(x)),"Mean"]})%>%
#outputDF <- data.frame(Parameters = names(grepl(nodes, rownames(x))),
#output = output)
t()%>%
data.frame()%>%
dplyr::mutate(Parameters = nodeNames,
model = rep(paste0("model", i), lengthNodes))%>%
dplyr::full_join(data.frame(Parameters = fullModel$expandNodeNames(nodes),
model = rep(paste0("model", i), length(fullModel$expandNodeNames(nodes)))),
by = c("Parameters", "model"))
devtools::load_all(".")
ret <- compareModelsMeanPlots(models = models,
modelNames = c("reduced model", "updated Model"),
fullModel = stateSpaceModel,
nodes = target)
ret$meanPlot
ret$sePlot
ret$confintPlot
load("/Volumes/kwakupa/example1SimData12.RData")
load("/Volumes/kwakupa/example1UpdatedIn1AUX45A2.RData")
load("/Volumes/kwakupa/example1ReducedIn145A2.RData")
models = list(example1ReducedModel, example1UpdatedModel)
#lapply(models[[2]], function(x){coda::as.mcmc(x[[2]])})
target = c('a', 'b', 'c', 'mu0')
library(dplyr)
library(ggmcmc)
library(ggplot2)
results <- compareModelsIndividualPars(models = models,
n.chains = 2,
nodes = target)
results
ret <- compareModelsPlots(models = models,
modelNames = c("reduced model", "updated Model"),
n.chains = 2,
nodes = target)
ret
devtools::load_all(".")
ret <- compareModelsMeanPlots(models = models,
modelNames = c("reduced model", "updated Model"),
fullModel = stateSpaceModel,
nodes = target)
ret
devtools::load_all(".")
models = list(example1ReducedModel, example1UpdatedModel)
#lapply(models[[2]], function(x){coda::as.mcmc(x[[2]])})
target = c('a', 'b', 'c', 'mu0')
library(dplyr)
library(ggmcmc)
library(ggplot2)
results <- compareModelsIndividualPars(models = models,
n.chains = 2,
nodes = target)
ret <- compareModelsPlots(models = models,
modelNames = c("reduced model", "updated Model"),
n.chains = 2,
nodes = target)
ret <- compareModelsMeanPlots(models = models,
modelNames = c("reduced model", "updated Model"),
fullModel = stateSpaceModel,
nodes = target)
ret
devtools::load_all(".")
