n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5, iNodePrev = 45)
)
devtools::load_all(".")
#model = new
message("Running updated model")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5, iNodePrev = 45)
)
reducedCase2$unweightedSamples
reducedCase2$weightedSamples
reducedCase2$logLike
devtools::load_all(".")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5, iNodePrev = 45)
)
model = stateSpaceModel
latent = "x"
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin)
weights = reducedCase2$weights
unweightedLatentSamples = reducedCase2$unweightedSamples
weightedLatentSamples = reducedCase2$weightedSamples
loglike = reducedCase2$logLike
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5, iNodePrev = 45)
timeStart1 <- Sys.time()
target = MCMCconfiguration[["target"]]
additionalPars = MCMCconfiguration[["additionalPars"]] #other dependent variables you seek to monitor
n.iter = MCMCconfiguration[["n.iter"]]
n.chains = MCMCconfiguration[["n.chains"]]
n.burnin = MCMCconfiguration[["n.burnin"]]
n.thin = MCMCconfiguration[["n.thin"]]
iNodePrev = pfControl[["iNodePrev"]]
M = pfControl[["M"]]
#iNodePrev = updatePFControl[["iNodePrev"]]
#M = updatePFControl[["M"]]
if(is.null(nParFiltRun)) nParFiltRun = 10000
nParFiltRun = 10000
#create new model for weights
estimationModel <- model$newModel(replicate = TRUE)
message("Building particle filter for model")
if(is.null(pfType)){
particleFilter <- myphdthesis::buildBootstrapFilterUpdate(model,
latent,
mvWSamplesWTSaved = weights,
mvWSamplesXSaved = unweightedLatentSamples,
mvEWSamplesXSaved = weightedLatentSamples,
logLikeVals = loglike,
control = pfControl)
particleFilterEst <- myphdthesis::buildBootstrapFilterUpdate(estimationModel,
latent,
mvWSamplesWTSaved = weights,
mvWSamplesXSaved = unweightedLatentSamples,
mvEWSamplesXSaved = weightedLatentSamples,
logLikeVals = loglike,
control = pfControl)
}
pfType = NULL
if(is.null(pfType)){
particleFilter <- myphdthesis::buildBootstrapFilterUpdate(model,
latent,
mvWSamplesWTSaved = weights,
mvWSamplesXSaved = unweightedLatentSamples,
mvEWSamplesXSaved = weightedLatentSamples,
logLikeVals = loglike,
control = pfControl)
particleFilterEst <- myphdthesis::buildBootstrapFilterUpdate(estimationModel,
latent,
mvWSamplesWTSaved = weights,
mvWSamplesXSaved = unweightedLatentSamples,
mvEWSamplesXSaved = weightedLatentSamples,
logLikeVals = loglike,
control = pfControl)
}
pfType = "auxiliary"
if(!is.null(pfType)){
if(!pfType %in% c("auxiliary", "bootstrap")) stop("Function currently works for auxiliary and bootstap Particle filters")
if(pfType == "bootstrap"){
particleFilter <- myphdthesis::buildBootstrapFilterUpdate(model,
latent,
mvWSamplesWTSaved = weights,
mvWSamplesXSaved = unweightedLatentSamples,
mvEWSamplesXSaved = weightedLatentSamples,
logLikeVals = loglike,
control = pfControl)
particleFilterEst <- myphdthesis::buildBootstrapFilterUpdate(estimationModel,
latent,
mvWSamplesWTSaved = weights,
mvWSamplesXSaved = unweightedLatentSamples,
mvEWSamplesXSaved = weightedLatentSamples,
logLikeVals = loglike,
control = pfControl)
}else{
particleFilter <- myphdthesis::buildAuxiliaryFilterUpdate(model,
latent,
mvWSamplesWTSaved = weights,
mvWSamplesXSaved = unweightedLatentSamples,
mvEWSamplesXSaved = weightedLatentSamples,
logLikeVals = loglike,
control = pfControl)
particleFilterEst <- myphdthesis::buildAuxiliaryFilterUpdate(estimationModel,
latent,
mvWSamplesWTSaved = weights,
mvWSamplesXSaved = unweightedLatentSamples,
mvEWSamplesXSaved = weightedLatentSamples,
logLikeVals = loglike,
control = pfControl)
}
devtools::load_all(".")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5, iNodePrev = 45)
)
devtools::load_all(".")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5, iNodePrev = 45)
)
devtools::load_all(".")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5, iNodePrev = 45)
)
devtools::load_all(".")
#model = new
message("Running updated model")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5, iNodePrev = 45)
)
devtools::load_all(".")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5, iNodePrev = 45)
)
devtools::load_all(".")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5, iNodePrev = 45)
)
updatedCase2
reducedCase2
reducedCase2$weightedSamples
updatedCase2
updatedCase2$timeTakenRun
reducedCase2$timeTakenRun
reducedCase2$timeTakenAll
devtools::load_all(".")
#model = new
message("Running updated model")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5, iNodePrev = 45)
)
updatedCase2
reducedCase2$weightedSamples
updatedCase2
devtools::load_all(".")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5,
iNodePrev = 45)
)
updatedCase2
reducedCase2
reducedCase2$unweightedSamples
updatedCase2$unweightedSamples
updatedCase2$unweightedSamples == reducedCase2$unweightedSamples[,1:45]
updatedCase2$unweightedSamples[,1:45] == reducedCase2$unweightedSamples
sum(updatedCase2$unweightedSamples[,1:44] == reducedCase2$unweightedSamples[,1:44])
updatedCase2
reducedCase2$mcmcSamplesAndSummary$summary$all.chains
updatedCase2$mcmcSamplesAndSummary$summary$all.chains
mcmcRunCase2$mcmcSamplesAndSummary$summary$all.chains
mcmcRunCase2$timeTakenRun
reducedCase2$timeTakenRun
updatedCase2$timeTakenRun
## load the nimble library and set seed
library('nimble')
library(nimbleSMC)
library(myphdthesis)
set.seed(1)
# Setting up MCMC iterations values
nIterations = 1000
nBurnin = 500
nChains = 2
nThin = 2
message("simulate data")
sim2 <- function(a, b, c, t, mu0){
x <- y <- numeric(t)
#x[1] <- rnorm(1, b/(1-a), sigPN/(sqrt(1- a*a)) )
x[1] <- rnorm(1, mu0, 1 )
#   #https://stats.stackexchange.com/questions/567944/how-can-i-sample-from-a-shifted-and-scaled-student-t-distribution-with-a-specifi
y[1] <- rnorm(1, x[1], 1)
#
for(k in 2:t){
x[k] <- rnorm(1, a*x[k -1] + b, 1)
y[k] <- rnorm(1, x[k-1]*c, 1)# + (sigOE * (sqrt(df -2)/df) * rt(1, df))
}
return(list(x=x, y=y))
}
#
message("simulating data")
simData <- sim2(a = 0.8,
b = 1,
c = 1.5,
t = 50,
mu0 = 0.2)
# #save data
save(simData, file = "case2SimData.RData")
#
# ## define the model
message("Running baseline model")
stateSpaceCode <- nimbleCode({
x[1] ~ dnorm(mu0, 1)
y[1] ~ dnorm(x[1], 1)
for(i in 2:t){
x[i] ~ dnorm(x[i-1] * a + b, 1)
y[i] ~ dnorm(x[i] * c, 1)
}
a ~ dunif(0, 1)
b ~ dnorm(0, 1)
c ~ dnorm(1,1)
mu0 ~ dnorm(0, 1)
})
#
# ## define data, constants, and initial values
data <- list(
#   #y = c(0.213, 1.025, 0.314, 0.521, 0.895, 1.74, 0.078, 0.474, 0.656, 0.802)
y = simData$y
)
constants <- list(
t = 50
)
inits <- list(
a = 0.1,
b = 0,
mu0= 0.2,
c = 1
)
#
# ## build the model
stateSpaceModel <- nimbleModel(stateSpaceCode,                                data = data,
constants = constants,
inits = inits,
check = FALSE)
#
# #Running without particleMCMC
newModel <- stateSpaceModel$newModel(replicate = TRUE)
#
mcmcRunCase2 <- myphdthesis::baselineSpartaEstimation(model = newModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin))
save(mcmcRunCase2 , file="case2NormalMCMC.RData")
mcmcRunCase2$mcmcSamplesAndSummary$summary$all.chains
# #save data
save(simData, file = "case2SimData.RData")
getwd()
simData$x
#
# # Reduced model
message("Running reduced model")
data <- list(
#y = c(0.213, 1.025, 0.314, 0.521, 0.895, 1.74, 0.078, 0.474, 0.656, 0.802)
y = simData$y[-c(46:50)]
)
constants <- list(
t = 45
)
newModelReduced <- nimbleModel(stateSpaceCode,
data = data,
constants = constants,
inits = inits,
check = FALSE)
reducedCase2 <- spartaNimWeights(model = newModelReduced, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin)
)
#save results
save(reducedCase2, file= "reducedCase2.RData")
#model = new
message("Running updated model")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5,
iNodePrev = 45)
)
save(updatedCase2, file = "updatedCase2.RData")
#
# # Reduced model
message("Running reduced model")
data <- list(
#y = c(0.213, 1.025, 0.314, 0.521, 0.895, 1.74, 0.078, 0.474, 0.656, 0.802)
y = simData$y[-c(46:50)]
)
constants <- list(
t = 45
)
newModelReduced <- nimbleModel(stateSpaceCode,
data = data,
constants = constants,
inits = inits,
check = FALSE)
reducedCase2 <- spartaNimWeights(model = newModelReduced, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin)
)
devtools::load_all(".")
reducedCase2 <- spartaNimWeights(model = newModelReduced, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin)
)
#save results
save(reducedCase2, file= "reducedCase2.RData")
#model = new
message("Running updated model")
updatedCase2 <- spartaNimUpdates(model = stateSpaceModel, latent = "x",
MCMCconfiguration = list(target = c('a', 'b', 'c', 'mu0'),
additionalPars = "x",
n.iter = nIterations,
n.chains = nChains,
n.burnin = nBurnin,
n.thin = nThin),
weights = reducedCase2$weights,
unweightedLatentSamples = reducedCase2$unweightedSamples,
weightedLatentSamples = reducedCase2$weightedSamples,
loglike = reducedCase2$logLike,
pfControl = list(saveAll = TRUE,
#lookahead = "mean",
smoothing = FALSE,
mcmc = TRUE,
M = 5,
iNodePrev = 45)
)
save(updatedCase2, file = "updatedCase2.RData")
