row.names = NULL)
}else{
fitted_values = c(m_bru$mlik[1,1])
samples <- inla.posterior.sample(1, m_bru)
#fitted_values <- plogis(samples[[1]]$latent[grepl("Predictor",rownames(samples[[1]]$latent) ),1])
intercept = samples[[1]]$latent[grepl("beta0",rownames(samples[[1]]$latent) ),1]
covEsts = samples[[1]]$latent[grepl("cov",rownames(samples[[1]]$latent) ),1]
#beta1 = samples[[1]]$latent[grepl("ivel",rownames(samples[[1]]$latent) ),1]
#beta2 = samples[[1]]$latent[grepl("date",rownames(samples[[1]]$latent) ),1][1]
#beta3 = samples[[1]]$latent[grepl("date.sq",rownames(samples[[1]]$latent) ),1]
#intercept = INLA::inla.emarginal(function(x) x,res$marginals.fixed[[1]])
#beta1 = INLA::inla.emarginal(function(x) x,res$marginals.fixed[[2]])
#beta2 = INLA::inla.emarginal(function(x) x,res$marginals.fixed[[3]])
#beta3 = INLA::inla.emarginal(function(x) x,res$marginals.fixed[[4]])
# rho = INLA::inla.emarginal(function(x) x,res$marginals.hyperpar[[1]])
#precision = INLA::inla.emarginal(function(x) x,res$marginals.hyper[[1]])
ret <- cbind(fitted_values, intercept, rbind(covEsts))
}
# colnames(ret) <- c("mld", fixedVals)
colnames(ret) <- c("mld", fixedVals)
ret <- as.matrix(ret)
#ret <- c(ret)
return(ret)
}
fit.inlaPar <- function(x ,
y ,
# betaMatrix,
extraVars,
fixedVals,
family,
nCores){
runFnx <- function(i,
x,
y,
# betaMatrix,
extraVars,
fixedVals,
family){
res <- fit.inla(x=x,
y=y,
#beta = betaMatrix[i, ],
extraVars[i, ],
fixedVals = fixedVals,
family=family)
return(res)
}
m <- nrow(extraVars)
allResults <- parallel::mclapply(1:m,
runFnx,
x,
y,
# betaMatrix,
extraVars,
fixedVals,
family,
mc.cores = nCores)
ret <- do.call("rbind", allResults)
return(ret)
}
# Set up the R function for use in INLA
nimbleINLA <- nimble::nimbleRcall(
prototype = function(
x=double(2), #x is a matrix
y=double(2), #y is a matrix
#beta=double(2), # beta is a matrix
extraVars = double(2),
fixedVals = character(1, default = c("intercept", paste0("beta", 1:16))),
#interInModel = double(0, default = 1),
family = character(0, default = "poisson"),
nCores = integer(0, default = 1)
) {},
returnType = double(2), # outcome is a vector
Rfun = 'fit.inlaPar'
)
#test function
extraVarsMatrix <- matrix(NA, nrow = 10, ncol = 100)
code <- nimbleCode({
### likelihood
for (i in 1:nsite) {
# model lambda
log(lambda[i]) <-  beta[1] +
beta[2] * covs[i, 1] +
beta[3] * covs[i, 2] +
beta[4] * covs[i, 3] +
beta[5] * covs[i, 4] +
beta[6] * covs[i, 5] +
beta[7] * covs[i, 6] +
beta[8] * covs[i, 7] +
beta[9] * covs[i, 8] +
beta[10] * covs[i, 9] +
beta[11] * covs[i, 10] +
beta[12] * covs[i, 11] +
beta[13] * covs[i, 12] +
beta[14] * covs[i, 13] +
beta[15] * covs[i, 14] +
beta[16] * covs[i, 15] +
beta[17] * covs[i, 16]
}
# model.re[i] <- sum(n.model.re[i,1:nknots])
# for(k in 1:nknots) {
#      n.model.re[i,k] <- b[k] * Z.matrix[i,k]
#   } # k
# } # i
for(i in 1:nsite){
# density / presence per site
#Z[i] ~ dbern(N[i]>0)
N[i] ~ dpois(lambda[i])
}
# observation model
for (o in 1:nobs) {
# count data (data type 1)
n[o] ~ dbin(p.ind[o],N[kov.site[o]])
# detetcion nondetection data (data type 2)
y[o] ~ dbin(p.all[o],nvis[o])
p.all[o] <- 1-pow((1-p.ind[o]),N[kov.site[o]])
logit(p.ind[o]) <- lp.origin[origin[o]] + lp.date * date[o] + lp.date2 * pow(date[o],2)
} # o
### priors
# priors on covariates
for(i in 2 : 17){
beta[i] ~ dnorm(0, 0.001)
}
# intercept fixed effects
beta[1] ~ dnorm(-5, 0.001)
# priors on random effects
#for (k in 1:nknots) { b[k] ~ dnorm(0, taub) }
# Prior on random effects hyperparameter
# taub ~ dgamma(0.01,0.01)
# p per origin
for (s in 1:3) { lp.origin[s] ~ dnorm(0,0.001) }
# date-effect for p
lp.date ~ dnorm(0,0.001)
lp.date2 ~ dnorm(0,0.001)
})
inlaData <- list(
Z = Z+0, # matrix with number of sites x number of years; 1 for cases with presence only data (data type 3), 0 for cases with absence only (data type 4), else NA
n = rpois(500, 1.5),#ydata$nind, # count data (data type 1)
y = rbinom(500, 0.5, size = 1),#ydata$ndet, # detection/nondetection data (data type 2)
# number of visits per combination of site x date (sometimes >1)
date = rnorm(500, 0, 1) , #c(scale(ydata$DayOfYear, scale = FALSE)),#c(scale(ydata$DayOfYear)), # day of year, scaled
# data source
#xCoord = as.numeric(scale(kov$x)),
# yCoord = as.numeric(scale(kov$y)),
covs = kov[,colnamesCovs]#, # add covariate data
# Z.matrix = Z.matrix,
# nknots = nknots
)
#Constants
const <- list(nsite = nrow(kov),
nvis = ydata$nrep,
origin = ydata$origin,
nobs = nrow(ydata),
kov.site = sample(1:100,size = nrow(ydata), replace = TRUE)#ydata$sitenr
)
# Initial values
inits <- function(){list(beta = rnorm(17, 0, 0.3),
lp.origin = rnorm(3, -1, 0.5),
lp.date = -0.5,
lp.date2 = -0.5,
N = rep(10, const$nsite),
taub = 1
)
}
poissonLowerBound <- numeric(const$nsite)
longFormat <- table(inlaData$n, const$kov.site)
longForm <- matrix(0, nrow = 100, ncol = 500)
for(j in 1:500){
longForm[const$kov.site[j], j] <- (inlaData$n)[const$kov.site[j]]
}
for(k in unique(const$kov.site)){
poissonLowerBound[k] <- max(longForm[, k], na.rm = TRUE) + 1
}
poissonLowerBound
occSpatialModel <- INLAWiNimDataGeneratingTargetDivide(data = c("n"),
covariate = as.matrix(x),
code = code,
family = "poisson",
modelData = modelData,
modelConstants = const,
modelInits = modelInits,
nimbleINLA = nimbleINLA,
inlaMCMC = "importanceSampling",
samplerControl = list( scale = sqrt(10),
adaptive = TRUE,
sliceMaxSteps = 30,
extraVars = c("N"),
initMean = rnorm(5,0,0.5),
initCov= 0.75^2*diag(5),
initEcoPars = mean(poissonLowerBound),
proposal = "normal",
latentIsDependent = FALSE,
spatioTemporal = TRUE,
poissonLowerBound = poissonLowerBound,
nCores = 1),#if nCores>1, we cannot run the code o windows
parametersToMonitor = list(mcmc = c("lp.origin","lp.date", "lp.date2" ,"N"),
mcmcINLA = c("beta"),
inla = c("beta"),
additionalPars = c("lambda")),
mcmcConfiguration = list(n.chains = 2,
n.iterations = 10,
n.burnin = 2,
n.thin = 1,
setSeed = TRUE,
samples=TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = FALSE)
)
devtools::load_all("C:/GitHub/nimbIMC")
occSpatialModel <- INLAWiNimDataGeneratingTargetDivide(data = c("n"),
covariate = as.matrix(x),
code = code,
family = "poisson",
modelData = modelData,
modelConstants = const,
modelInits = modelInits,
nimbleINLA = nimbleINLA,
inlaMCMC = "importanceSampling",
samplerControl = list( scale = sqrt(10),
adaptive = TRUE,
sliceMaxSteps = 30,
extraVars = c("N"),
initMean = rnorm(5,0,0.5),
initCov= 0.75^2*diag(5),
initEcoPars = mean(poissonLowerBound),
proposal = "normal",
latentIsDependent = FALSE,
spatioTemporal = TRUE,
poissonLowerBound = poissonLowerBound,
nCores = 1),#if nCores>1, we cannot run the code o windows
parametersToMonitor = list(mcmc = c("lp.origin","lp.date", "lp.date2" ,"N"),
mcmcINLA = c("beta"),
inla = c("beta"),
additionalPars = c("lambda")),
mcmcConfiguration = list(n.chains = 2,
n.iterations = 10,
n.burnin = 2,
n.thin = 1,
setSeed = TRUE,
samples=TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = FALSE)
)
code <- nimbleCode({
### likelihood
for (i in 1:nsite) {
# model lambda
log(lambda[i]) <-  beta[1] +
beta[2] * covs[i, 1] +
beta[3] * covs[i, 2] +
beta[4] * covs[i, 3] +
beta[5] * covs[i, 4] +
beta[6] * covs[i, 5] +
beta[7] * covs[i, 6] +
beta[8] * covs[i, 7] +
beta[9] * covs[i, 8] +
beta[10] * covs[i, 9] +
beta[11] * covs[i, 10] +
beta[12] * covs[i, 11] +
beta[13] * covs[i, 12] +
beta[14] * covs[i, 13] +
beta[15] * covs[i, 14] +
beta[16] * covs[i, 15] +
beta[17] * covs[i, 16]
}
# model.re[i] <- sum(n.model.re[i,1:nknots])
# for(k in 1:nknots) {
#      n.model.re[i,k] <- b[k] * Z.matrix[i,k]
#   } # k
# } # i
for(i in 1:nsite){
# density / presence per site
#Z[i] ~ dbern(N[i]>0)
N[i] ~ dpois(lambda[i])
}
# observation model
for (o in 1:nobs) {
# count data (data type 1)
n[o] ~ dbin(p.ind[o],N[kov.site[o]])
# detetcion nondetection data (data type 2)
y[o] ~ dbin(p.all[o],nvis[o])
p.all[o] <- 1-pow((1-p.ind[o]),N[kov.site[o]])
logit(p.ind[o]) <- lp.origin[origin[o]] + lp.date * date[o] + lp.date2 * pow(date[o],2)
} # o
### priors
# priors on covariates
for(i in 2 : 17){
beta[i] ~ dnorm(0, 0.001)
}
# intercept fixed effects
beta[1] ~ dnorm(-5, 0.001)
# priors on random effects
#for (k in 1:nknots) { b[k] ~ dnorm(0, taub) }
# Prior on random effects hyperparameter
# taub ~ dgamma(0.01,0.01)
# p per origin
for (s in 1:3) { lp.origin[s] ~ dnorm(0,0.001) }
# date-effect for p
lp.date ~ dnorm(0,0.001)
lp.date2 ~ dnorm(0,0.001)
})
inlaData <- list(
Z = Z+0, # matrix with number of sites x number of years; 1 for cases with presence only data (data type 3), 0 for cases with absence only (data type 4), else NA
n = rpois(500, 1.5),#ydata$nind, # count data (data type 1)
y = rbinom(500, 0.5, size = 1),#ydata$ndet, # detection/nondetection data (data type 2)
# number of visits per combination of site x date (sometimes >1)
date = rnorm(500, 0, 1) , #c(scale(ydata$DayOfYear, scale = FALSE)),#c(scale(ydata$DayOfYear)), # day of year, scaled
# data source
#xCoord = as.numeric(scale(kov$x)),
# yCoord = as.numeric(scale(kov$y)),
covs = kov[,colnamesCovs]#, # add covariate data
# Z.matrix = Z.matrix,
# nknots = nknots
)
#Constants
const <- list(nsite = nrow(kov),
nvis = ydata$nrep,
origin = ydata$origin,
nobs = nrow(ydata),
kov.site = sample(1:100,size = nrow(ydata), replace = TRUE)#ydata$sitenr
)
# Initial values
inits <- function(){list(beta = rnorm(17, 0, 0.3),
lp.origin = rnorm(3, -1, 0.5),
lp.date = -0.5,
lp.date2 = -0.5,
N = rep(10, const$nsite),
taub = 1
)
}
poissonLowerBound <- numeric(const$nsite)
longFormat <- table(inlaData$n, const$kov.site)
longForm <- matrix(0, nrow = 100, ncol = 500)
for(j in 1:500){
longForm[const$kov.site[j], j] <- (inlaData$n)[const$kov.site[j]]
}
for(k in unique(const$kov.site)){
poissonLowerBound[k] <- max(longForm[, k], na.rm = TRUE) + 1
}
occSpatialModel <- INLAWiNimDataGeneratingTargetDivide(data = c("n"),
covariate = as.matrix(x),
code = code,
family = "poisson",
modelData = modelData,
modelConstants = const,
modelInits = modelInits,
nimbleINLA = nimbleINLA,
inlaMCMC = "importanceSampling",
samplerControl = list( scale = sqrt(10),
adaptive = TRUE,
sliceMaxSteps = 30,
extraVars = c("N"),
initMean = rnorm(5,0,0.5),
initCov= 0.75^2*diag(5),
initEcoPars = mean(poissonLowerBound),
proposal = "normal",
latentIsDependent = FALSE,
spatioTemporal = TRUE,
poissonLowerBound = poissonLowerBound,
nCores = 1),#if nCores>1, we cannot run the code o windows
parametersToMonitor = list(mcmc = c("lp.origin","lp.date", "lp.date2" ,"N"),
mcmcINLA = c("beta"),
inla = c("beta"),
additionalPars = c("lambda")),
mcmcConfiguration = list(n.chains = 2,
n.iterations = 10,
n.burnin = 2,
n.thin = 1,
setSeed = TRUE,
samples=TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = FALSE)
)
occSpatialModel <- INLAWiNimDataGeneratingTargetDivide(data = c("n"),
covariate = as.matrix(x),
code = code,
family = "poisson",
modelData = inlaData,
modelConstants = const,
modelInits = inits,
nimbleINLA = nimbleINLA,
inlaMCMC = "importanceSampling",
samplerControl = list( scale = sqrt(10),
adaptive = TRUE,
sliceMaxSteps = 30,
extraVars = c("N"),
initMean = rnorm(5,0,0.5),
initCov= 0.75^2*diag(5),
initEcoPars = mean(poissonLowerBound),
proposal = "normal",
latentIsDependent = FALSE,
spatioTemporal = TRUE,
poissonLowerBound = poissonLowerBound,
nCores = 1),#if nCores>1, we cannot run the code o windows
parametersToMonitor = list(mcmc = c("lp.origin","lp.date", "lp.date2" ,"N"),
mcmcINLA = c("beta"),
inla = c("beta"),
additionalPars = c("lambda")),
mcmcConfiguration = list(n.chains = 2,
n.iterations = 10,
n.burnin = 2,
n.thin = 1,
setSeed = TRUE,
samples=TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = FALSE)
)
initsList <- modelInits()
#Create the model in nimble
mwtc <- nimble::nimbleModel(code,
data = modelData,
constants = const,
inits = initsList)
#Create the model in nimble
mwtc <- nimble::nimbleModel(code,
data = inlaData,
constants = const,
inits = inits)
# Initial values
inits <- function(){list(beta = rnorm(17, 0, 0.3),
lp.origin = rnorm(3, -1, 0.5),
lp.date = -0.5,
lp.date2 = -0.5,
N = rep(10, const$nsite),
taub = 1
)
}
#Create the model in nimble
mwtc <- nimble::nimbleModel(code,
data = inlaData,
constants = const,
inits = inits)
initsList <- inits()
#Create the model in nimble
mwtc <- nimble::nimbleModel(code,
data = inlaData,
constants = const,
inits = inits)
#Create the model in nimble
mwtc <- nimble::nimbleModel(code,
data = inlaData,
constants = const,
inits = initsList )
mwtc$calculate()
nimble::value(mwtc)
max(n)
max(inlaData$n)
max(poissonLowerBound)
poissonLowerBound <- numeric(const$nsite)
longForm <- matrix(0, nrow = 100, ncol = 500)
for(j in 1:500){
longForm[const$kov.site[j], j] <- (inlaData$n)[const$kov.site[j]]
}
for(k in unique(const$kov.site)){
poissonLowerBound[k] <- max(longForm[k, ], na.rm = TRUE)
}
poissonLowerBound
max(poissonLowerBound)
max(inlaData$n)
inlaData$n
which.max(inlaData$n)
const$kov.site[394]
j = 394
(inlaData$n)[const$kov.site[j]]
const$kov.site[j]
(inlaData$n)[j]
for(j in 1:500){
longForm[const$kov.site[j], j] <- (inlaData$n)[j]
}
for(k in unique(const$kov.site)){
poissonLowerBound[k] <- max(longForm[k, ], na.rm = TRUE)
}
poissonLowerBound
occSpatialModel <- INLAWiNimDataGeneratingTargetDivide(data = c("n"),
covariate = as.matrix(x),
code = code,
family = "poisson",
modelData = inlaData,
modelConstants = const,
modelInits = inits,
nimbleINLA = nimbleINLA,
inlaMCMC = "importanceSampling",
samplerControl = list( scale = sqrt(10),
adaptive = TRUE,
sliceMaxSteps = 30,
extraVars = c("N"),
initMean = rnorm(5,0,0.5),
initCov= 0.75^2*diag(5),
initEcoPars = mean(poissonLowerBound),
proposal = "normal",
latentIsDependent = FALSE,
spatioTemporal = TRUE,
poissonLowerBound = poissonLowerBound,
nCores = 1),#if nCores>1, we cannot run the code o windows
parametersToMonitor = list(mcmc = c("lp.origin","lp.date", "lp.date2" ,"N"),
mcmcINLA = c("beta"),
inla = c("beta"),
additionalPars = c("lambda")),
mcmcConfiguration = list(n.chains = 2,
n.iterations = 10,
n.burnin = 2,
n.thin = 1,
setSeed = TRUE,
samples=TRUE,
samplesAsCodaMCMC = TRUE,
summary = TRUE,
WAIC = FALSE)
)
occSpatialModel$isINLA$mcmc.out$summary
